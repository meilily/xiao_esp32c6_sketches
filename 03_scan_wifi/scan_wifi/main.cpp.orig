/*
 *  This sketch is based on WiFiScan from the ESP32 Arduino core
 *  Source: https://github.com/espressif/arduino-esp32/tree/master/libraries/WiFi/examples/WiFiScan
 *  This appears to be released under the GNU LESSER GENERAL PUBLIC LICENSE 
 *    see: https://github.com/espressif/arduino-esp32/blob/master/LICENSE.md
 */
#include <Arduino.h>
#include "WiFi.h"

#define INTERNAL_ANTENNA LOW
#define EXTERNAL_ANTENNA HIGH

#define ENABLE_RF_SWITCH LOW
#define DISABLE_RF_SWITCH HIGH

/* 
 These are defined as 
    static const uint8_t WIFI_ENABLE = 3;
    static const uint8_t WIFI_ANT_CONFIG = 14;         
 in ESP32 3.0.4 
*/ 
static const uint8_t RF_SWITCH_VDD = 3;
static const uint8_t RF_SWITCH_VCTL = 14;

/*
 Each IO pad can be in one of 3 states:
    a) mode INPUT
    b) mode OUTPUT value 0
    c) mode OUTPUT value 1
 so that there are 9 possible combinations or
 tests to run.
*/ 
void setTest(int test) {
  Serial.printf("Test #%d\n", test);
  switch (test) {

  case 1:
    pinMode(RF_SWITCH_VDD, INPUT);
    pinMode(RF_SWITCH_VCTL, INPUT);
    Serial.println("RF_SWITCH_VDD and RF_SWITCH_VCTL I/O pins are in INPUT mode; the RF switch is in its default state");
    break;
  case 2:
    pinMode(RF_SWITCH_VDD, INPUT);
    pinMode(RF_SWITCH_VCTL, OUTPUT);
    delay(100);
    digitalWrite(RF_SWITCH_VCTL, INTERNAL_ANTENNA);
    Serial.println("RF_SWITCH_VDD I/O pin in INPUT MODE, RF_SWITCH_VCTL is OUTPUT = INTERNAL_ANTENNA (LOW)");
    break;
  case 3:
    pinMode(RF_SWITCH_VDD, INPUT);
    pinMode(RF_SWITCH_VCTL, OUTPUT);
    delay(100);
    digitalWrite(RF_SWITCH_VCTL, EXTERNAL_ANTENNA);
    Serial.println("RF_SWITCH_VDD I/O pin in INPUT MODE, RF_SWITCH_VCTL is OUTPUT = EXTERNAL_ANTENNA (HIGH)");
    break;


  case 4:
    pinMode(RF_SWITCH_VDD, OUTPUT);
    delay(100);
    digitalWrite(RF_SWITCH_VDD, DISABLE_RF_SWITCH);
    pinMode(RF_SWITCH_VCTL, INPUT);
    Serial.println("RF_SWITCH_VDD is OUTPUT = DISABLE_RF_SWITCH (HIGH), RF_SWITCH_VCTL I/O pin in INPUT mode;");
    break;
  case 5:
    pinMode(RF_SWITCH_VDD, OUTPUT);
    delay(100);
    digitalWrite(RF_SWITCH_VDD, DISABLE_RF_SWITCH);
    delay(100);
    pinMode(RF_SWITCH_VCTL, OUTPUT);
    delay(100);
    digitalWrite(RF_SWITCH_VCTL, INTERNAL_ANTENNA);
    Serial.println("RF_SWITCH_VDD is OUTPUT = DISABLE_RF_SWITCH (HIGH), RF_SWITCH_VCTL is OUTPUT = INTERNAL_ANTENNA (LOW)");
    break;
  case 6:
    pinMode(RF_SWITCH_VDD, OUTPUT);
    delay(100);
    digitalWrite(RF_SWITCH_VDD, DISABLE_RF_SWITCH);
    delay(100);
    pinMode(RF_SWITCH_VCTL, OUTPUT);
    delay(100);
    digitalWrite(RF_SWITCH_VCTL, EXTERNAL_ANTENNA);
    Serial.println("RF_SWITCH_VDD is OUTPUT = DISABLE_RF_SWITCH (HIGH), RF_SWITCH_VCTL is OUTPUT = EXTERNAL_ANTENNA (HIGH)");
    break;


  case 7:
    pinMode(RF_SWITCH_VDD, OUTPUT);
    delay(100);
    digitalWrite(RF_SWITCH_VDD, ENABLE_RF_SWITCH);
    pinMode(RF_SWITCH_VCTL, INPUT);
    Serial.println("RF_SWITCH_VDD is OUTPUT = ENABLE_RF_SWITCH (LOW), RF_SWITCH_VCTL I/O pin in INPUT mode;");
    break;
  case 8:
    pinMode(RF_SWITCH_VDD, OUTPUT);
    delay(100);
    digitalWrite(RF_SWITCH_VDD, ENABLE_RF_SWITCH);
    delay(100);
    pinMode(RF_SWITCH_VCTL, OUTPUT);
    delay(100);
    digitalWrite(RF_SWITCH_VCTL, INTERNAL_ANTENNA);
    Serial.println("RF_SWITCH_VDD is OUTPUT = ENABLE_RF_SWITCH (LOW), RF_SWITCH_VCTL is OUTPUT = INTERNAL_ANTENNA (LOW)");
    break;
  case 9:
    pinMode(RF_SWITCH_VDD, OUTPUT);
    delay(100);
    digitalWrite(RF_SWITCH_VDD, ENABLE_RF_SWITCH);
    delay(100);
    pinMode(RF_SWITCH_VCTL, OUTPUT);
    delay(100);
    digitalWrite(RF_SWITCH_VCTL, EXTERNAL_ANTENNA);
    Serial.println("RF_SWITCH_VDD is OUTPUT = ENABLE_RF_SWITCH (LOW), RF_SWITCH_VCTL is OUTPUT = EXTERNAL_ANTENNA (HIGH)");
    break;
  default:
    Serial.println("Invalid test number"); 
  }  
}
  
#define SCANS_PER_TEST 3

void setup() {
  Serial.begin();
  // Set WiFi to station mode and disconnect from an AP if it was previously connected.
  WiFi.mode(WIFI_STA);
  WiFi.disconnect();
  delay(2000);
}

void loop() {

  Serial.println("\nStarting test suite");
  Serial.println("-------------------");

  for (int test=1; test<10; test++) {

    setTest(test);

    for  (int i=0; i<SCANS_PER_TEST; i++) {
      Serial.println("Scan start");

      // WiFi.scanNetworks will return the number of networks found.
      int n = WiFi.scanNetworks();
      Serial.println("Scan done");
      if (n == 0) {
        Serial.println("no networks found");
      } else {
        Serial.print(n);
        Serial.println(" networks found");
        Serial.println("Nr | SSID                             | RSSI | CH |");
        for (int i = 0; i < n; ++i) {
          // Print SSID and RSSI for each network found
          Serial.printf("%2d", i + 1);
          Serial.print(" | ");
          Serial.printf("%-32.32s", WiFi.SSID(i).c_str());
          Serial.print(" | ");
          Serial.printf("%4ld", WiFi.RSSI(i));
          Serial.print(" | ");
          Serial.printf("%2ld", WiFi.channel(i));
          Serial.println(" |");
          delay(10);
        }
      }
      Serial.println("");

      // Delete the scan result to free memory for code below.
      WiFi.scanDelete();

      // Wait a bit before scanning again.
      delay(5000);
    } // for i
  } // for test
  Serial.println("\nTest suite completed.");
  Serial.println("Will restart in 5 minutes");
  delay(5*60*1000);
}
